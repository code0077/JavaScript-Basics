1. Is the function called with new (new binding)? If so, this is the
newly constructed object.
var bar = new foo()

2. Is the function called with call or apply (explicit binding), even
hidden inside a bind hard binding? If so, this is the explicitly
specified object.
var bar = foo.call( obj2 )

3. Is the function called with a context (implicit binding), otherwise
known as an owning or containing object? If so, this is that con‚Äê
text object.
var bar = obj1.foo()

4. Otherwise, default the this (default binding). If in strict mode,
pick undefined, otherwise pick the global object.
var bar = foo()


If you pass null or undefined as a this binding parameter to call,
apply, or bind, those values are effectively ignored, and instead the
default binding rule applies to the invocation:
function foo() {
 console.log( this.a );
}
var a = 2;
foo.call( null ); // 2