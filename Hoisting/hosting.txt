We can be tempted to look at var a = 2; as one statement, but the
JavaScript engine does not see it that way. It sees var a and a = 2 as
two separate statements, the first one a compiler-phase task, and the
second one an execution-phase task.
What this leads to is that all declarations in a scope, regardless of where
they appear, are processed first before the code itself is executed. You
can visualize this as declarations (variables and functions) being
“moved” to the top of their respective scopes, which we call hoisting.
Declarations themselves are hoisted, but assignments, even assignments
of function expressions, are not hoisted.
Be careful about duplicate declarations, especially mixed between
normal var declarations and function declarations—peril awaits if you
do!


variable and function declarations are “moved” from where they
appear in the flow of the code to the top of the code. This gives rise to
the name hoisting.

Function declarations are hoisted, as we just saw. But function expressions
are not.


Both function declarations and variable declarations are hoisted. But
a subtle detail (that can show up in code with multiple “duplicate”
declarations) is that functions are hoisted first, and then variables.

While multiple/duplicate var declarations are effectively ignored,
subsequent function declarations do override previous ones.

Function declarations that appear inside of normal blocks typically
hoist to the enclosing scope, rather than being conditional.