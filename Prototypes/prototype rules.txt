myObject.foo = "bar";
If the myObject object already has a normal data accessor property
called foo directly present on it, the assignment is as simple as chang‐
ing the value of the existing property.
If foo is not already present directly on myObject, the [[Proto
type]] chain is traversed, just like for the [[Get]] operation. If foo is
not found anywhere in the chain, the property foo is added directly
to myObject with the specified value, as expected.
However, if foo is already present somewhere higher in the chain,
nuanced (and perhaps surprising) behavior can occur with the myOb
ject.foo = "bar" assignment. We’ll examine that more in just a mo‐
ment.
If the property name foo ends up both on myObject itself and at a
higher level of the [[Prototype]] chain that starts at myObject, this
is called shadowing. The foo property directly on myObject shadows
any foo property that appears higher in the chain, because the myOb
ject.foo lookup would always find the foo property that’s lowest in
the chain.
As we just hinted, shadowing foo on myObject is not as simple as it
may seem. We will now examine three scenarios for the myObject.foo
= "bar" assignment when foo is not already on myObject directly, but
is at a higher level of myObject’s [[Prototype]] chain:
1. If a normal data accessor (see Chapter 3) property named foo is
found anywhere higher on the [[Prototype]] chain, and it’s not
marked as read-only (writable:false), then a new property
called foo is added directly to myObject, resulting in a shadowed
property.
2. If a foo is found higher on the [[Prototype]] chain, but it’s
marked as read-only (writable:false), then both the setting of
that existing property as well as the creation of the shadowed
property on myObject are disallowed. If the code is running in
strict mode, an error will be thrown. Otherwise, the setting of
the property value will silently be ignored. Either way, no shad‐
owing occurs.

3. If a foo is found higher on the [[Prototype]] chain and it’s a
setter (see Chapter 3), then the setter will always be called. No foo
will be added to (aka shadowed on) myObject, nor will the foo
setter be redefined.

If you want to shadow foo in cases 2 and 3, you cannot use = assign‐
ment, but must instead use Object.defineProperty(..).
